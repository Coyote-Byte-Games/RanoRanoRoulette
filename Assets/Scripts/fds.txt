using UnityEngine;
using UnityEditor;
using System.Collections;

[CustomPropertyDrawer(typeof(ArrayLayout))]
public class CustPropertyDrawer : PropertyDrawer {


	

	public override void OnGUI(Rect position,SerializedProperty property,GUIContent label){
	
		
		EditorGUI.PrefixLabel(position,label);
		Rect newposition = position;
		newposition.y += 18f;
		SerializedProperty data = property.FindPropertyRelative("rows");
		SerializedProperty numOfRows = property.FindPropertyRelative("rowNum");
		int rowCount = numOfRows.intValue;
		int colCount = data.;
		//data.rows[0][]
		for(int j=0;rowCount<3;j++){
			SerializedProperty row = data.GetArrayElementAtIndex(j).FindPropertyRelative("row");
			newposition.height = 18f;
			// if(row.arraySize != 3)
			// 	row.arraySize = 3;
			newposition.width = position.width/rowCount;
			for(int i=0;i<colCount;i++){
				EditorGUI.PropertyField(newposition,row.GetArrayElementAtIndex(i),GUIContent.none);
				newposition.x += newposition.width;
			}

			newposition.x = position.x;
			newposition.y += 18f;
		}


		Rect newPos = position;
		newPos.y += 18*(rowCount+1);
		newPos.height = 18;

		// int val = property.FindPropertyRelative(nameof(numOfRows)).intValue;
		// int newVal = EditorGUI.IntField(newPos, val);
		// property.FindPropertyRelative(nameof(numOfRows)).intValue = newVal;
		 EditorGUI.PropertyField(newPos, numOfRows, GUIContent.none);
		 EditorGUI.PropertyField(newPos, , GUIContent.none);

	}

	public override float GetPropertyHeight(SerializedProperty property,GUIContent label){
		return 18f * (3+2);
	}
}
